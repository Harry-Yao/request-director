#log4j.rootLogger = [ level ] , appenderName, appenderName, ...
#appenderName则是用来指明将所有的log信息存放到什么地方，Log4j中支持多种appender，如 console、files
#level优先级：ALL < DEBUG < INFO < WARN < ERROR < FATAL < OFF
#appenderName  指定日志信息输出到哪个地方。您可以同时指定多个输出目的地
log4j.rootLogger = info, stdout,infolog,errorlog

#某个包或类的Logger
log4j.Logger = search,Test


### ConsoleAppender ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %t level %p - %c line %L - %m%n

### FileAppender ###
log4j.appender.infolog = org.apache.log4j.FileAppender
log4j.appender.infolog.File = /usr/log/request-director.log
log4j.appender.infolog.Append = true
#高于或者等于info级别的log，都会被捕获
log4j.appender.infolog.Threshold = INFO
log4j.appender.infolog.DatePattern='.'yyyy-MM-dd
log4j.appender.infolog.layout = org.apache.log4j.PatternLayout
log4j.appender.infolog.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %t level %p - %c line %L - %m%n


### FileAppender ###
log4j.appender.errorlog = org.apache.log4j.FileAppender
log4j.appender.errorlog.File = /usr/log/request-director.error
log4j.appender.errorlog.Append = true
#高于或者等于error级别的log，都会被捕获
log4j.appender.errorlog.Threshold = ERROR
log4j.appender.errorlog.DatePattern='.'yyyy-MM-dd
log4j.appender.errorlog.layout = org.apache.log4j.PatternLayout
log4j.appender.errorlog.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %t level %p - %c line %L - %m%n


#日志的输出位置：
#org.apache.log4j.ConsoleAppender（控制台）
#org.apache.log4j.FileAppender（文件）
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）

# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
# %r 输出自应用启动到输出该log信息耗费的毫秒数
# %c 输出所属的类目，通常就是所在类的全名
# %t 输出产生该日志事件的线程名
# %n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
# %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)